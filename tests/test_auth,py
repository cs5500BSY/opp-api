from fastapi.testclient import TestClient
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from main import app
from db.database import Base
from models.models import Users
import pytest

SQLALCHEMY_DATABASE_URL = "sqlite:///./test_db.db"

engine = create_engine(SQLALCHEMY_DATABASE_URL)
TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

@pytest.fixture(scope="module")
def db():
    Base.metadata.create_all(bind=engine)
    db = TestingSessionLocal()
    try:
        yield db
    finally:
        db.close()

@pytest.fixture
def client(db):
    def override_get_db():
        try:
            yield db
        finally:
            pass

    app.dependency_overrides[get_db] = override_get_db
    yield TestClient(app)

def test_signup(client):
    response = client.post("/api/signup", json={"email": "test@example.com", "password": "password123", "username": "testuser"})
    assert response.status_code == 201
    assert response.json()["message"] == "User created successfully"

def test_login(client, db):
    user = Users(email="testlogin@example.com", username="testlogin", hashed_password="hashedpassword", is_active=True, role="user")
    db.add(user)
    db.commit()

    response = client.post("/api/login", data={"username": "testlogin", "password": "hashedpassword"})
    assert response.status_code == 200
    assert "access_token" in response.json()

